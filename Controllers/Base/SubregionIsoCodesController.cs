// Copyright 2023 Ellucian Company L.P. and its affiliates.






/* ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the CreateController T4 Generator - Version 1.0
//     Last generated on  04/02/2019 11:45:12
//
//      Schema Version: 1.0.0
//      Schema Name:  subregion-iso-codes
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//    
// </auto-generated>     
//----------------------------------------------------------------------------- */

//Copyright 2019-2022 Ellucian Company L.P. and its affiliates.
// 11/17/2021 jlm
// Changed manually for new ColleagueWebApiException. Ethos team informed of the CreateController generator change required.
using System.Collections.Generic;
using Ellucian.Web.Http.Controllers;

using System.ComponentModel;
using Ellucian.Colleague.Api.Licensing;
using Ellucian.Colleague.Configuration.Licensing;
using Ellucian.Web.License;
using Microsoft.Extensions.Logging;
using System;
using System.Net;
using System.Threading.Tasks;
using Ellucian.Web.Http.Exceptions;
using Ellucian.Colleague.Api.Utility;
using Ellucian.Colleague.Coordination.Base.Services;
using Ellucian.Web.Security;
using Ellucian.Colleague.Domain.Exceptions;
using Ellucian.Web.Http.Models;
using Ellucian.Web.Http.Filters;
using Ellucian.Web.Http;
using Ellucian.Colleague.Dtos;

namespace Ellucian.Colleague.Api.Controllers.Base
{
    /// <summary>
    /// Provides access to SubregionIsoCodes
    /// </summary>
    [Authorize]
    [LicenseProvider(typeof (EllucianLicenseProvider))]
    [EllucianLicenseModule(ModuleConstants.Base)]
    public class SubregionIsoCodesController : BaseCompressedApiController
    {
        
        private readonly ILogger _logger;

        /// <summary>
        /// Initializes a new instance of the SubregionIsoCodesController class.
        /// </summary>
        /// <param name="logger">Interface to logger</param>
        /// <param name="actionContextAccessor"></param>
        /// <param name="apiSettings"></param>
        public SubregionIsoCodesController(ILogger logger, IActionContextAccessor actionContextAccessor, ApiSettings apiSettings) : base(actionContextAccessor, apiSettings)
        {
            this._logger = logger;
        }

        /// <remarks>FOR USE WITH ELLUCIAN EEDM</remarks>
        /// <summary>
        /// Retrieves all subregion-iso-codes
        /// </summary>
        /// <returns>All <see cref="Dtos.SubregionIsoCodes">SubregionIsoCodes</see></returns>
        [CustomMediaTypeAttributeFilter(ErrorContentType = IntegrationErrors2)]
        [HttpGet]
        [HeaderVersionRoute("/subregion-iso-codes", "1.0.0", true, RouteConstants.HedtechIntegrationMediaTypeFormat, Name = "GetSubregionIsoCodes", IsEedmSupported = true)]
        public async Task<ActionResult<IEnumerable<SubregionIsoCodes>>> GetSubregionIsoCodesAsync()
        {
            return new List<SubregionIsoCodes>();
        }

        /// <summary>
        /// Retrieve (GET) an existing subregion-iso-codes
        /// </summary>
        /// <param name="guid">GUID of the subregion-iso-codes to get</param>
        /// <returns>A subregionIsoCodes object <see cref="Dtos.SubregionIsoCodes"/> in EEDM format</returns>
        [CustomMediaTypeAttributeFilter(ErrorContentType = IntegrationErrors2)]
        [HttpGet]
        [HeaderVersionRoute("/subregion-iso-codes/{guid}", "1.0.0", true, RouteConstants.HedtechIntegrationMediaTypeFormat, Name = "DefaultGetSubregionIsoCodesByGuid", IsEedmSupported = true)]
        public async Task<ActionResult<Dtos.SubregionIsoCodes>> GetSubregionIsoCodesByGuidAsync([FromRoute] string guid)
        {
            try
            {
                throw new ColleagueWebApiException(string.Format("No subregion-iso-codes was found for guid {0}.", guid));
            }
            catch (Exception e)
            {
                return CreateHttpResponseException(IntegrationApiUtility.ConvertToIntegrationApiException(e), HttpStatusCode.NotFound);
            }
        }
        /// <summary>
        /// Create (POST) a new subregionIsoCodes
        /// </summary>
        /// <param name="subregionIsoCodes">DTO of the new subregionIsoCodes</param>
        /// <returns>A subregionIsoCodes object <see cref="Dtos.SubregionIsoCodes"/> in EEDM format</returns>
        [HttpPost]
        [HeaderVersionRoute("/subregion-iso-codes", "1.0.0", false, RouteConstants.HedtechIntegrationMediaTypeFormat, Name = "PostSubregionIsoCodesV100")]
        public async Task<ActionResult<Dtos.SubregionIsoCodes>> PostSubregionIsoCodesAsync([FromBody] Dtos.SubregionIsoCodes subregionIsoCodes)
        {
            //Update is not supported for Colleague but HeDM requires full crud support.
            return CreateHttpResponseException(new IntegrationApiException(IntegrationApiUtility.DefaultNotSupportedApiErrorMessage, IntegrationApiUtility.DefaultNotSupportedApiError));

        }

        /// <summary>
        /// Update (PUT) an existing subregionIsoCodes
        /// </summary>
        /// <param name="guid">GUID of the subregionIsoCodes to update</param>
        /// <param name="subregionIsoCodes">DTO of the updated subregionIsoCodes</param>
        /// <returns>A subregionIsoCodes object <see cref="Dtos.SubregionIsoCodes"/> in EEDM format</returns>
        [HttpPut]
        [HeaderVersionRoute("/subregion-iso-codes/{guid}", "1.0.0", false, RouteConstants.HedtechIntegrationMediaTypeFormat, Name = "PutSubregionIsoCodesV100")]
        public async Task<ActionResult<Dtos.SubregionIsoCodes>> PutSubregionIsoCodesAsync([FromRoute] string guid, [FromBody] Dtos.SubregionIsoCodes subregionIsoCodes)
        {
            //Update is not supported for Colleague but HeDM requires full crud support.
            return CreateHttpResponseException(new IntegrationApiException(IntegrationApiUtility.DefaultNotSupportedApiErrorMessage, IntegrationApiUtility.DefaultNotSupportedApiError));

        }

        /// <summary>
        /// Delete (DELETE) a subregionIsoCodes
        /// </summary>
        /// <param name="guid">GUID to desired subregionIsoCodes</param>
        [HttpDelete]
        [Route("/subregion-iso-codes/{guid}", Name = "DefaultDeleteSubregionIsoCodes", Order = -10)]
        public async Task<IActionResult> DeleteSubregionIsoCodesAsync(string guid)
        {
            //Update is not supported for Colleague but HeDM requires full crud support.
            return CreateHttpResponseException(new IntegrationApiException(IntegrationApiUtility.DefaultNotSupportedApiErrorMessage, IntegrationApiUtility.DefaultNotSupportedApiError));

        }
    }
}
